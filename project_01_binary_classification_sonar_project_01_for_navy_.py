# -*- coding: utf-8 -*-
"""Project 01- Binary Classification Sonar Project 01 For Navy_

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1otVbbaaf3rxddQT53eOTYR02GeJKxH1J
"""

import numpy as np
import pandas as pd
from keras import models
import keras
import tensorflow as tf
from keras.utils import plot_model
from keras.models import Sequential, Model
from keras import layers
from keras import Input
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

x = 7
np.random.seed(x)
x

import io
from google.colab import files
uploaded = files.upload()
dataframe = pd.read_csv(io.StringIO(uploaded['sonar.csv'].decode('utf-8')))
dataframe

dataset = dataframe.values
X = dataset[:,0:60].astype(float)
Y = dataset[:,60]
X.shape[1]

encoder = LabelEncoder()
encoder.fit(Y)
encoded_Y = encoder.transform(Y)
reverseEncoding = encoder.inverse_transform(encoded_Y)
encoded_Y

def create_baseline():
    model = Sequential()
    model.add(layers.Dense(60, activation='relu', input_shape=(X.shape[1],)))
    model.add(layers.Dense(1, activation = 'sigmoid'))
    model.compile(optimizer='Adam',loss='binary_crossentropy',metrics=['accuracy'])
    return model

estimator = KerasClassifier(build_fn= create_baseline , epochs=100, batch_size=5, verbose=0)
kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=x)
results = cross_val_score(estimator, X, encoded_Y, cv=kfold)
print("Results: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))

#Evaluate baseline model with standardized dataset
np.random.seed(x)
estimators = []
estimators.append(('standardize', StandardScaler()))
estimators.append(('mlp', KerasClassifier(build_fn= create_baseline, epochs = 100, batch_size = 5, verbose = 0)))
pipeline = Pipeline(estimators)
kFold = StratifiedKFold(n_splits = 10, shuffle = True, random_state = x)
results = cross_val_score(pipeline, X, encoded_Y, cv = kFold)
print("Standardized: %.2f%%(%.2f%%)" % (results.mean() *  100, results.std()* 100))

#Smaller model

def create_smaller():
  model = models.Sequential()
  model.add(Dense(60, activation = 'relu', input_shape = (X.shape[1],)))
  model.add(Dense(30, activation = 'relu')
  model.add(Dense(1, activation = 'sigmoid'))
  model.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
  return model

estimators = []
estimators.append(('standardize', StandardScaler()))
estimators.append(('mlp', KerasClassifier(build_fn = create_smaller, epochs = 100, batch_size = 5, verbose = 0)))
pipeline = Pipeline(estimators)
kFold = StratifiedKFold(n_splits = 10, shuffle = True, random_state = x)
resuls = cross_val_score(pipeline, X, encoded_Y, cv = kFold)
print("Smaller: %.2f%%(%.2f%%)" % (results.mean()*100, results.std()* 100))

#Larger Model

def create_larger():
  model = models.Sequential()
  model.add(Dense(60, activation = 'relu', input_shape = (X.shape[1],)))
  model.add(Dense(60, activation = 'relu'))
  model.add(Dense(1, activation = 'sigmoid'))
  model.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
  return model

estimators = []
estimators.append(('standardize', StandardScaler()))
estimators.append(('mlp', KerasClassifier(build_fn = create_larger, epochs = 100, batch_size = 5, verbose = 0)))
pipeline = Pipeline(estimators)
kFold = StratifiedKFold(n_splits = 10, shuffle = True, random_state = x)
results = cross_val_score(pipeline, X, encoded_Y, cv= kFold)
print("Larger: %.2f%% (%.2f%%)" % (results.mean()* 100, results.std()* 100))

def create_overfit_model():
  model = model.Sequential()
  model.add(Dense(60, activation = 'relu', input_shape = (X.shape[1],)))
  model.add(Dense(60, activation = 'relu'))
  model.add(Dense(30, activation = 'relu'))
  model.add(Dense(1, activation = 'sigmoid'))
  model.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
  return model

estimators = []
estimators.append(('standardize', StandardScaler()))
estimators.append(('mlp', KerasClassifier(build_fn = create_larger, epochs = 200, batch_size = 5, verbose = 0)))
pipeline = Pipeline(estimators)
kFold = StratifiedKFold(n_splits = 10, shuffle = True, random_state = x)
results = cross_val_score(pipeline, X, encoded_Y, cv= kFold)
print("Overfit Model : %.2f%% (%.2f%%)" % (results.mean()* 100, results.std()* 100))

